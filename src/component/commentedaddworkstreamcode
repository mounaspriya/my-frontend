// "use client"

// import { useState } from "react"
// import "../styles/form.css"

// export default function ReviewerForm() {
//   const [activeWorkstream, setActiveWorkstream] = useState("01")
//   const [formData, setFormData] = useState({
//     fullName: "",
//     registrationType: "",
//     reviewStatus: "",
//     reviewReason: "", // Add this new field
//     reviewType: "",
//     websiteUrl: "",
//     reviewDate: "",
//     reviewWeek: "",
//     month: "",
//     year: "",
//     reviewDateTraffic: "",
//     websiteOwner: "",
//     websiteType: "",
//     accessibility: "",
//     thirdPartyContent: "",
//     registrationPlatform: "",
//     // Add conditional fields A1-A19
//     conditionalFields: {},
//     uploadedFiles: [],
//   })

//   const workstreams = [
//     { id: "01", label: "Workstream 01", color: "#E3F2FD" },
//     { id: "02", label: "Workstream 02", color: "#F3E5F5" },
//     { id: "03", label: "Workstream 03", color: "#E8EAF6" },
//     { id: "04", label: "Workstream 04", color: "#E8F5E8" },
//     { id: "05", label: "Workstream 05", color: "#FFF3E0" },
//   ]

//   const handleInputChange = (field, value) => {
//     setFormData((prev) => ({ ...prev, [field]: value }))
//     // Debug log to see what's being set
//     console.log(`Setting ${field} to:`, value)
//   }

//   const handleSubmit = (e) => {
//     e.preventDefault()
//     console.log("Form submitted:", formData)
//   }

//   const getVisibleFields = () => {
//     console.log("Current thirdPartyContent value:", formData.thirdPartyContent) // Debug log

//     switch (formData.thirdPartyContent) {
//       case "yes":
//         return Array.from({ length: 19 }, (_, i) => `A${i + 1}`)
//       case "no":
//         return Array.from({ length: 7 }, (_, i) => `A${i + 2}`) // A2-A8
//       case "na":
//         return ["A1"]
//       default:
//         return []
//     }
//   }

//   const handleConditionalFieldChange = (fieldId, type, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       conditionalFields: {
//         ...prev.conditionalFields,
//         [fieldId]: {
//           ...prev.conditionalFields[fieldId],
//           [type]: value,
//         },
//       },
//     }))
//   }

//   const handleFileUpload = (files) => {
//     if (files) {
//       setFormData((prev) => ({
//         ...prev,
//         uploadedFiles: [...prev.uploadedFiles, ...Array.from(files)],
//       }))
//     }
//   }

//   const removeFile = (index) => {
//     setFormData((prev) => ({
//       ...prev,
//       uploadedFiles: prev.uploadedFiles.filter((_, i) => i !== index),
//     }))
//   }

//   // Get visible fields for debugging
//   const visibleFields = getVisibleFields()
//   console.log("Visible fields:", visibleFields) // Debug log

//   return (
//     <div className="form-container">
//       {/* Workstream Tabs */}
//       <div className="workstream-tabs">
//         {workstreams.map((workstream) => (
//           <div
//             key={workstream.id}
//             className={`workstream-tab ${activeWorkstream === workstream.id ? "active" : ""}`}
//             style={{ backgroundColor: workstream.color }}
//             onClick={() => setActiveWorkstream(workstream.id)}
//           >
//             {workstream.label}
//           </div>
//         ))}
//       </div>

//       {/* Main Form */}
//       <div className="form-content">
//         <h2 className="form-title">Reviewer Information</h2>

//         <form onSubmit={handleSubmit} className="reviewer-form">
//           {/* First Row */}
//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="fullName">Reviewed By</label>
//               <input
//                 type="text"
//                 id="fullName"
//                 placeholder="Full Name"
//                 value={formData.fullName}
//                 onChange={(e) => handleInputChange("fullName", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="registrationType">Registration Type</label>
//               <select
//                 id="registrationType"
//                 value={formData.registrationType}
//                 onChange={(e) => handleInputChange("registrationType", e.target.value)}
//               >
//                 <option value="">Select an option</option>
//                 <option value="old-registration">Old Registration</option>
//                 <option value="new-registration">New Registration</option>
//               </select>
//             </div>
//           </div>

//           {/* Review Status Row - Updated Layout */}
//           <div className="review-status-row">
//             <div className="form-group">
//               <label>Review Status</label>
//               <div className="radio-group">
//                 <label className="radio-option">
//                   <input
//                     type="radio"
//                     name="reviewStatus"
//                     value="completed"
//                     checked={formData.reviewStatus === "completed"}
//                     onChange={(e) => handleInputChange("reviewStatus", e.target.value)}
//                   />
//                   <span className="radio-custom"></span>
//                   Completed
//                 </label>
//                 <label className="radio-option">
//                   <input
//                     type="radio"
//                     name="reviewStatus"
//                     value="not-completed"
//                     checked={formData.reviewStatus === "not-completed"}
//                     onChange={(e) => handleInputChange("reviewStatus", e.target.value)}
//                   />
//                   <span className="radio-custom"></span>
//                   Not Completed
//                 </label>
//               </div>
//             </div>

//             {/* Conditional reason field in same row */}
//             {formData.reviewStatus === "not-completed" && (
//               <div className="form-group reason-field">
//                 <label htmlFor="reviewReason">If chosen not, please provide a reason:</label>
//                 <select
//                   id="reviewReason"
//                   value={formData.reviewReason}
//                   onChange={(e) => handleInputChange("reviewReason", e.target.value)}
//                 >
//                   <option value="">Select a reason</option>
//                   <option value="site-offline">Site offline</option>
//                   <option value="inactive">Inactive</option>
//                   <option value="does-not-exist">Does Not Exist</option>
//                   <option value="unable-to-open-site">Unable to open Site</option>
//                 </select>
//               </div>
//             )}
//           </div>

//           {/* Review Type and Website URL Row */}
//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewType">Review Type</label>
//               <select
//                 id="reviewType"
//                 value={formData.reviewType}
//                 onChange={(e) => handleInputChange("reviewType", e.target.value)}
//               >
//                 <option value="">Select an option</option>
//                 <option value="new-review">New Review</option>
//                 <option value="re-review">Re-Review</option>
//               </select>
//             </div>
//             <div className="form-group">
//               <label htmlFor="websiteUrl">Website URL</label>
//               <input
//                 type="url"
//                 id="websiteUrl"
//                 placeholder="Website Address"
//                 value={formData.websiteUrl}
//                 onChange={(e) => handleInputChange("websiteUrl", e.target.value)}
//               />
//             </div>
//           </div>

//           {/* URL Information Section */}
//           <h3 className="section-title">URL Information</h3>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewDate">Review Date</label>
//               <input
//                 type="date"
//                 id="reviewDate"
//                 value={formData.reviewDate}
//                 onChange={(e) => handleInputChange("reviewDate", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="reviewWeek">Review Week</label>
//               <input
//                 type="text"
//                 id="reviewWeek"
//                 placeholder="Every Friday of the week"
//                 value={formData.reviewWeek}
//                 onChange={(e) => handleInputChange("reviewWeek", e.target.value)}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="month">Month</label>
//               <input
//                 type="text"
//                 id="month"
//                 placeholder="Mention Month"
//                 value={formData.month}
//                 onChange={(e) => handleInputChange("month", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="year">Year</label>
//               <input
//                 type="text"
//                 id="year"
//                 placeholder="Mention Year"
//                 value={formData.year}
//                 onChange={(e) => handleInputChange("year", e.target.value)}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewDateTraffic">Review Date Traffic</label>
//               <input
//                 type="text"
//                 id="reviewDateTraffic"
//                 placeholder="Mention Number"
//                 value={formData.reviewDateTraffic}
//                 onChange={(e) => handleInputChange("reviewDateTraffic", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="websiteOwner">Website Owner</label>
//               <input
//                 type="text"
//                 id="websiteOwner"
//                 placeholder="Company Name"
//                 value={formData.websiteOwner}
//                 onChange={(e) => handleInputChange("websiteOwner", e.target.value)}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="websiteType">Website Type</label>
//               <input
//                 type="text"
//                 id="websiteType"
//                 placeholder="Account"
//                 value={formData.websiteType}
//                 onChange={(e) => handleInputChange("websiteType", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="accessibility">Accessibility</label>
//               <input
//                 type="text"
//                 id="accessibility"
//                 placeholder="Website Address"
//                 value={formData.accessibility}
//                 onChange={(e) => handleInputChange("accessibility", e.target.value)}
//               />
//             </div>
//           </div>

//           {/* Third-Party Content */}
//           <div className="form-group full-width">
//             <label>Third-Party Content</label>
//             <div className="radio-group horizontal">
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="yes"
//                   checked={formData.thirdPartyContent === "yes"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 Yes
//               </label>
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="no"
//                   checked={formData.thirdPartyContent === "no"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 No
//               </label>
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="na"
//                   checked={formData.thirdPartyContent === "na"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 N/A
//               </label>
//             </div>
//             {/* Debug display */}
//             <p style={{ fontSize: "12px", color: "#666", marginTop: "5px" }}>
//               Current selection: {formData.thirdPartyContent || "None"}
//             </p>
//           </div>

//           {/* Registration Platform */}
//           <div className="form-group full-width">
//             <label htmlFor="registrationPlatform">Registration platform (if third-party)</label>
//             <input
//               type="text"
//               id="registrationPlatform"
//               placeholder="Mention website URL"
//               value={formData.registrationPlatform}
//               onChange={(e) => handleInputChange("registrationPlatform", e.target.value)}
//             />
//           </div>

//           {/* Conditional Fields - Fixed condition */}
//           {formData.thirdPartyContent && formData.thirdPartyContent !== "" && (
//             <div className="conditional-fields-section">
//               <h3 className="section-title">
//                 Assessment Fields
//                 <span style={{ fontSize: "14px", fontWeight: "normal", color: "#666" }}>
//                   ({visibleFields.length} fields visible)
//                 </span>
//               </h3>
//               <div className="conditional-fields-grid">
//                 {visibleFields.map((fieldId) => (
//                   <div key={fieldId} className="conditional-field">
//                     <div className="field-header">
//                       <h4 className="field-label">{fieldId}</h4>
//                       <div className="radio-group horizontal">
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="yes"
//                             checked={formData.conditionalFields[fieldId]?.answer === "yes"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           Yes
//                         </label>
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="no"
//                             checked={formData.conditionalFields[fieldId]?.answer === "no"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           No
//                         </label>
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="na"
//                             checked={formData.conditionalFields[fieldId]?.answer === "na"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           N/A
//                         </label>
//                       </div>
//                     </div>
//                     <div className="comments-section">
//                       <textarea
//                         placeholder="Comments"
//                         value={formData.conditionalFields[fieldId]?.comments || ""}
//                         onChange={(e) => handleConditionalFieldChange(fieldId, "comments", e.target.value)}
//                         className="comments-textarea"
//                       />
//                     </div>
//                   </div>
//                 ))}
//               </div>
//             </div>
//           )}

//           {/* File Upload Section */}
//           <div className="file-upload-section">
//             <h3 className="section-title">Upload Files</h3>
//             <div
//               className="file-drop-zone"
//               onDrop={(e) => {
//                 e.preventDefault()
//                 handleFileUpload(e.dataTransfer.files)
//               }}
//               onDragOver={(e) => e.preventDefault()}
//               onDragEnter={(e) => e.preventDefault()}
//             >
//               <div className="upload-icon">
//                 <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
//                   <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
//                   <polyline points="7,10 12,15 17,10" />
//                   <line x1="12" y1="15" x2="12" y2="3" />
//                 </svg>
//               </div>
//               <p className="upload-text">Drop items here</p>
//               <div className="upload-divider">or</div>
//               <label className="browse-button">
//                 <input
//                   type="file"
//                   multiple
//                   accept="image/*,.pdf,.doc,.docx"
//                   onChange={(e) => handleFileUpload(e.target.files)}
//                   style={{ display: "none" }}
//                 />
//                 Browse files
//               </label>
//             </div>

//             {formData.uploadedFiles.length > 0 && (
//               <div className="uploaded-files">
//                 <h4>Uploaded Files:</h4>
//                 <div className="file-list">
//                   {formData.uploadedFiles.map((file, index) => (
//                     <div key={index} className="file-item">
//                       <span className="file-name">{file.name}</span>
//                       <button type="button" onClick={() => removeFile(index)} className="remove-file-btn">
//                         ×
//                       </button>
//                     </div>
//                   ))}
//                 </div>
//               </div>
//             )}
//           </div>

//           <button type="submit" className="submit-button">
//             Submit Form
//           </button>
//         </form>
//       </div>
//     </div>
//   )
// }





// "use client"

// import { useState, useEffect } from "react"
// import axios from "axios"
// import { X, Upload, AlertCircle } from "lucide-react"
// import "../styles/form.css"

// export default function ReviewerForm() {
//   // Helper function to get Friday of any given week using pure string manipulation
//   const getFridayOfWeek = (dateStr) => {
//     if (!dateStr) return null
//     try {
//       // Validate date format
//       const dateRegex = /^\d{4}-\d{2}-\d{2}$/
//       if (!dateRegex.test(dateStr)) {
//         console.error("❌ Invalid date format:", dateStr)
//         return null
//       }
//       // Parse date components as numbers
//       const [year, month, day] = dateStr.split("-").map(Number)
//       // Validate date components
//       if (year < 1900 || year > 2100 || month < 1 || month > 12 || day < 1 || day > 31) {
//         console.error("❌ Invalid date components:", { year, month, day })
//         return null
//       }
//       // Calculate day of week using Zeller's congruence (no Date object needed)
//       let adjustedMonth = month
//       let adjustedYear = year
//       if (month < 3) {
//         adjustedMonth += 12
//         adjustedYear -= 1
//       }
//       // Zeller's congruence formula
//       const q = day
//       const m = adjustedMonth
//       const k = adjustedYear % 100
//       const j = Math.floor(adjustedYear / 100)
//       const h = (q + Math.floor((13 * (m + 1)) / 5) + k + Math.floor(k / 4) + Math.floor(j / 4) - 2 * j) % 7
//       // Convert Zeller's result to standard day of week (0 = Saturday, 1 = Sunday, ..., 6 = Friday)
//       const dayOfWeek = (h + 5) % 7 // Convert to 0 = Monday, 1 = Tuesday, ..., 6 = Sunday
//       // Calculate days to add to get to Friday (4 = Friday in 0-based week starting Monday)
//       const daysToFriday = (4 - dayOfWeek + 7) % 7
//       // Add days to get Friday
//       const fridayDay = day + daysToFriday
//       let fridayMonth = month
//       let fridayYear = year
//       // Handle month overflow
//       const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
//       // Check for leap year
//       if (fridayYear % 4 === 0 && (fridayYear % 100 !== 0 || fridayYear % 400 === 0)) {
//         daysInMonth[1] = 29
//       }
//       if (fridayDay > daysInMonth[fridayMonth - 1]) {
//         const newDay = fridayDay - daysInMonth[fridayMonth - 1]
//         fridayMonth += 1
//         if (fridayMonth > 12) {
//           fridayMonth = 1
//           fridayYear += 1
//         }
//         return `${fridayYear}-${String(fridayMonth).padStart(2, "0")}-${String(newDay).padStart(2, "0")}`
//       }
//       return `${fridayYear}-${String(fridayMonth).padStart(2, "0")}-${String(fridayDay).padStart(2, "0")}`
//     } catch (error) {
//       console.error("❌ Error calculating Friday:", error)
//       return null
//     }
//   }

//   // Helper function to get current date values without timezone issues
//   const getCurrentDateValues = () => {
//     // Get current date in local timezone as YYYY-MM-DD string
//     const today = new Date()
//     const year = today.getFullYear()
//     const month = String(today.getMonth() + 1).padStart(2, "0")
//     const day = String(today.getDate()).padStart(2, "0")
//     const todayStr = `${year}-${month}-${day}`
//     const fridayOfWeek = getFridayOfWeek(todayStr)
//     // Get month name and year from Friday date
//     const [fridayYear, fridayMonth] = fridayOfWeek.split("-").map(Number)
//     const monthNames = [
//       "January",
//       "February",
//       "March",
//       "April",
//       "May",
//       "June",
//       "July",
//       "August",
//       "September",
//       "October",
//       "November",
//       "December",
//     ]
//     return {
//       today: todayStr,
//       fridayOfWeek,
//       month: monthNames[fridayMonth - 1],
//       year: fridayYear,
//     }
//   }

//   // Initialize with current date values
//   const initialDateValues = getCurrentDateValues()

//   const [activeWorkstream, setActiveWorkstream] = useState("01")
//   const [formData, setFormData] = useState({
//     fullName: "",
//     registrationType: "",
//     reviewStatus: "",
//     reviewReason: "",
//     reviewType: "",
//     websiteUrl: "",
//     reviewDate: initialDateValues.today,
//     reviewWeek: initialDateValues.fridayOfWeek,
//     month: initialDateValues.month,
//     year: initialDateValues.year,
//     reviewDateTraffic: "",
//     websiteOwner: "",
//     websiteType: "",
//     accessibility: "",
//     thirdPartyContent: "",
//     registrationPlatform: "",
//     conditionalFields: {},
//     uploadedFiles: [],
//     website_source_id: "",
//   })

//   // Website URL autocomplete states
//   const [suggestions, setSuggestions] = useState([])
//   const [showSuggestions, setShowSuggestions] = useState(false)
//   const [urlStatus, setUrlStatus] = useState({ isNew: false, message: "" })
//   const [isSubmitting, setIsSubmitting] = useState(false)
//   const [uploadProgress, setUploadProgress] = useState(0)

//   const workstreams = [
//     { id: "01", label: "Workstream 01", color: "#E3F2FD" },
//     { id: "02", label: "Workstream 02", color: "#F3E5F5" },
//     { id: "03", label: "Workstream 03", color: "#E8EAF6" },
//     { id: "04", label: "Workstream 04", color: "#E8F5E8" },
//     { id: "05", label: "Workstream 05", color: "#FFF3E0" },
//   ]

//   // Reset date fields to current values on component mount
//   useEffect(() => {
//     const resetToCurrentDate = () => {
//       const currentValues = getCurrentDateValues()
//       console.log("🔄 Resetting to current date values:", currentValues)
//       setFormData((prev) => ({
//         ...prev,
//         reviewDate: currentValues.today,
//         reviewWeek: currentValues.fridayOfWeek,
//         month: currentValues.month,
//         year: currentValues.year,
//       }))
//     }
//     resetToCurrentDate()
//   }, [])

//   // Website URL autocomplete functionality
//   const fetchSuggestions = async (searchTerm) => {
//     try {
//       const response = await axios.get(`http://localhost:5000/api/website-sources?search=${searchTerm}`)
//       setSuggestions(response.data)
//       setShowSuggestions(true)
//       const exactMatch = response.data.find((item) => item.website_url.toLowerCase() === searchTerm.toLowerCase())
//       if (!exactMatch && searchTerm.length > 3) {
//         setUrlStatus({
//           isNew: true,
//           message: "This URL will be added as a new entry when you submit the form.",
//         })
//       } else {
//         setUrlStatus({ isNew: false, message: "" })
//       }
//     } catch (error) {
//       console.error("Failed to fetch suggestions:", error)
//       setSuggestions([])
//     }
//   }

//   const handleWebsiteUrlChange = (e) => {
//     const value = e.target.value
//     setFormData((prev) => ({
//       ...prev,
//       websiteUrl: value,
//       website_source_id: "",
//     }))
//     if (value.length > 1) {
//       fetchSuggestions(value)
//     } else {
//       setSuggestions([])
//       setShowSuggestions(false)
//       setUrlStatus({ isNew: false, message: "" })
//     }
//   }

//   const handleSuggestionClick = (suggestion) => {
//     setFormData((prev) => ({
//       ...prev,
//       websiteUrl: suggestion.website_url,
//       website_source_id: suggestion.id,
//     }))
//     setSuggestions([])
//     setShowSuggestions(false)
//     setUrlStatus({ isNew: false, message: "" })
//   }

//   const handleInputChange = (field, value) => {
//     setFormData((prev) => ({ ...prev, [field]: value }))
//   }

//   // Handle date change with Friday calculation
//   const handleDateChange = (e) => {
//     const selected = e.target.value
//     console.log("📅 Date changed to:", selected)
//     const fridayDate = getFridayOfWeek(selected)
//     console.log("📅 Calculated Friday:", fridayDate)

//     // Get month and year from Friday date using string parsing
//     const [fridayYear, fridayMonth] = fridayDate.split("-").map(Number)
//     const monthNames = [
//       "January",
//       "February",
//       "March",
//       "April",
//       "May",
//       "June",
//       "July",
//       "August",
//       "September",
//       "October",
//       "November",
//       "December",
//     ]
//     const month = monthNames[fridayMonth - 1]
//     const year = fridayYear

//     console.log("📅 Final values:", { selected, fridayDate, month, year })

//     setFormData((prev) => ({
//       ...prev,
//       reviewDate: selected,
//       reviewWeek: fridayDate,
//       month: month,
//       year: year,
//     }))
//   }

//   // Image upload functionality
//   const handleImageUpload = (e) => {
//     const files = Array.from(e.target.files)
//     const currentImages = formData.uploadedFiles
//     const remainingSlots = 3 - currentImages.length
//     const filesToAdd = files.slice(0, remainingSlots)
//     setFormData((prev) => ({
//       ...prev,
//       uploadedFiles: [...prev.uploadedFiles, ...filesToAdd],
//     }))
//     e.target.value = ""
//   }

//   const removeImage = (indexToRemove) => {
//     setFormData((prev) => ({
//       ...prev,
//       uploadedFiles: prev.uploadedFiles.filter((_, index) => index !== indexToRemove),
//     }))
//   }

//   const handleSubmit = (e) => {
//     e.preventDefault()
//     console.log("Form submitted:", formData)
//     // Add your submission logic here
//   }

//   const getVisibleFields = () => {
//     switch (formData.thirdPartyContent) {
//       case "yes":
//         return Array.from({ length: 19 }, (_, i) => `A${i + 1}`)
//       case "no":
//         return Array.from({ length: 7 }, (_, i) => `A${i + 2}`) // A2-A8
//       case "na":
//         return ["A1"]
//       default:
//         return []
//     }
//   }

//   const handleConditionalFieldChange = (fieldId, type, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       conditionalFields: {
//         ...prev.conditionalFields,
//         [fieldId]: {
//           ...prev.conditionalFields[fieldId],
//           [type]: value,
//         },
//       },
//     }))
//   }

//   const visibleFields = getVisibleFields()

//   return (
//     <div className="form-container">
//       {/* Workstream Tabs */}
//       <div className="workstream-tabs">
//         {workstreams.map((workstream) => (
//           <div
//             key={workstream.id}
//             className={`workstream-tab ${activeWorkstream === workstream.id ? "active" : ""}`}
//             style={{ backgroundColor: workstream.color }}
//             onClick={() => setActiveWorkstream(workstream.id)}
//           >
//             {workstream.label}
//           </div>
//         ))}
//       </div>

//       {/* Main Form */}
//       <div className="form-content">
//         <h2 className="form-title">Reviewer Information</h2>

//         <form onSubmit={handleSubmit} className="reviewer-form">
//           {/* First Row */}
//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="fullName">Reviewed By</label>
//               <input
//                 type="text"
//                 id="fullName"
//                 placeholder="Full Name"
//                 value={formData.fullName}
//                 onChange={(e) => handleInputChange("fullName", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="registrationType">Registration Type</label>
//               <select
//                 id="registrationType"
//                 value={formData.registrationType}
//                 onChange={(e) => handleInputChange("registrationType", e.target.value)}
//               >
//                 <option value="">Select an option</option>
//                 <option value="old-registration">Old Registration</option>
//                 <option value="new-registration">New Registration</option>
//               </select>
//             </div>
//           </div>

//           {/* Review Status Row */}
//           <div className="review-status-row">
//             <div className="form-group">
//               <label>Review Status</label>
//               <div className="radio-group">
//                 <label className="radio-option">
//                   <input
//                     type="radio"
//                     name="reviewStatus"
//                     value="completed"
//                     checked={formData.reviewStatus === "completed"}
//                     onChange={(e) => handleInputChange("reviewStatus", e.target.value)}
//                   />
//                   <span className="radio-custom"></span>
//                   Completed
//                 </label>
//                 <label className="radio-option">
//                   <input
//                     type="radio"
//                     name="reviewStatus"
//                     value="not-completed"
//                     checked={formData.reviewStatus === "not-completed"}
//                     onChange={(e) => handleInputChange("reviewStatus", e.target.value)}
//                   />
//                   <span className="radio-custom"></span>
//                   Not Completed
//                 </label>
//               </div>
//             </div>

//             {/* Conditional reason field in same row */}
//             {formData.reviewStatus === "not-completed" && (
//               <div className="form-group reason-field">
//                 <label htmlFor="reviewReason">If chosen not, please provide a reason:</label>
//                 <select
//                   id="reviewReason"
//                   value={formData.reviewReason}
//                   onChange={(e) => handleInputChange("reviewReason", e.target.value)}
//                 >
//                   <option value="">Select a reason</option>
//                   <option value="site-offline">Site offline</option>
//                   <option value="inactive">Inactive</option>
//                   <option value="does-not-exist">Does Not Exist</option>
//                   <option value="unable-to-open-site">Unable to open Site</option>
//                 </select>
//               </div>
//             )}
//           </div>

//           {/* Review Type and Website URL Row */}
//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewType">Review Type</label>
//               <select
//                 id="reviewType"
//                 value={formData.reviewType}
//                 onChange={(e) => handleInputChange("reviewType", e.target.value)}
//               >
//                 <option value="">Select an option</option>
//                 <option value="new-review">New Review</option>
//                 <option value="re-review">Re-Review</option>
//               </select>
//             </div>
//             <div className="form-group" style={{ position: "relative" }}>
//               <label htmlFor="websiteUrl">Website URL</label>
//               <input
//                 type="text"
//                 id="websiteUrl"
//                 placeholder="Start typing a website URL..."
//                 value={formData.websiteUrl}
//                 onChange={handleWebsiteUrlChange}
//                 onBlur={() => setTimeout(() => setShowSuggestions(false), 200)} // Increased timeout
//                 onFocus={() => {
//                   if (formData.websiteUrl.length > 1 && suggestions.length > 0) setShowSuggestions(true)
//                 }}
//                 required
//               />

//               {/* New URL Status Indicator */}
//               {urlStatus.isNew && (
//                 <div className="new-url-indicator">
//                   <AlertCircle size={16} style={{ marginRight: "8px" }} />
//                   {urlStatus.message}
//                 </div>
//               )}

//               {/* Suggestions Dropdown */}
//               {showSuggestions && (
//                 <ul className="suggestions-dropdown">
//                   {suggestions.length > 0 ? (
//                     suggestions.map((item) => (
//                       <li
//                         key={item.id}
//                         onMouseDown={() => handleSuggestionClick(item)} // Changed from onClick to onMouseDown
//                         className="suggestion-item"
//                       >
//                         {item.website_url}
//                       </li>
//                     ))
//                   ) : (
//                     <li className="suggestion-item no-hover">No existing URLs found</li>
//                   )}
//                 </ul>
//               )}
//             </div>
//           </div>

//           {/* URL Information Section */}
//           <h3 className="section-title">URL Information</h3>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewDate">Review Date</label>
//               <input type="date" id="reviewDate" value={formData.reviewDate} onChange={handleDateChange} />
//             </div>
//             <div className="form-group">
//               <label htmlFor="reviewWeek">Review Week (Friday)</label>
//               <input
//                 type="date"
//                 id="reviewWeek"
//                 value={formData.reviewWeek}
//                 readOnly
//                 style={{ backgroundColor: "#f0f0f0", cursor: "not-allowed" }}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="month">Month</label>
//               <input
//                 type="text"
//                 id="month"
//                 value={formData.month}
//                 readOnly
//                 style={{ backgroundColor: "#f0f0f0", cursor: "not-allowed" }}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="year">Year</label>
//               <input
//                 type="text"
//                 id="year"
//                 value={formData.year}
//                 readOnly
//                 style={{ backgroundColor: "#f0f0f0", cursor: "not-allowed" }}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewDateTraffic">Review Date Traffic</label>
//               <input
//                 type="text"
//                 id="reviewDateTraffic"
//                 placeholder="Mention Number"
//                 value={formData.reviewDateTraffic}
//                 onChange={(e) => handleInputChange("reviewDateTraffic", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="websiteOwner">Website Owner</label>
//               <input
//                 type="text"
//                 id="websiteOwner"
//                 placeholder="Company Name"
//                 value={formData.websiteOwner}
//                 onChange={(e) => handleInputChange("websiteOwner", e.target.value)}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="websiteType">Website Type</label>
//               <input
//                 type="text"
//                 id="websiteType"
//                 placeholder="Account"
//                 value={formData.websiteType}
//                 onChange={(e) => handleInputChange("websiteType", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="accessibility">Accessibility</label>
//               <input
//                 type="text"
//                 id="accessibility"
//                 placeholder="Website Address"
//                 value={formData.accessibility}
//                 onChange={(e) => handleInputChange("accessibility", e.target.value)}
//               />
//             </div>
//           </div>

//           {/* Third-Party Content */}
//           <div className="form-group full-width">
//             <label>Third-Party Content</label>
//             <div className="radio-group horizontal">
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="yes"
//                   checked={formData.thirdPartyContent === "yes"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 Yes
//               </label>
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="no"
//                   checked={formData.thirdPartyContent === "no"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 No
//               </label>
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="na"
//                   checked={formData.thirdPartyContent === "na"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 N/A
//               </label>
//             </div>
//           </div>

//           {/* Registration Platform */}
//           <div className="form-group full-width">
//             <label htmlFor="registrationPlatform">Registration platform (if third-party)</label>
//             <input
//               type="text"
//               id="registrationPlatform"
//               placeholder="Mention website URL"
//               value={formData.registrationPlatform}
//               onChange={(e) => handleInputChange("registrationPlatform", e.target.value)}
//             />
//           </div>

//           {/* Conditional Fields */}
//           {formData.thirdPartyContent && formData.thirdPartyContent !== "" && (
//             <div className="conditional-fields-section">
//               <h3 className="section-title">
//                 Assessment Fields
//                 <span style={{ fontSize: "14px", fontWeight: "normal", color: "#666" }}>
//                   ({visibleFields.length} fields visible)
//                 </span>
//               </h3>
//               <div className="conditional-fields-grid">
//                 {visibleFields.map((fieldId) => (
//                   <div key={fieldId} className="conditional-field">
//                     <div className="field-header">
//                       <h4 className="field-label">{fieldId}</h4>
//                       <div className="radio-group horizontal">
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="yes"
//                             checked={formData.conditionalFields[fieldId]?.answer === "yes"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           Yes
//                         </label>
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="no"
//                             checked={formData.conditionalFields[fieldId]?.answer === "no"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           No
//                         </label>
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="na"
//                             checked={formData.conditionalFields[fieldId]?.answer === "na"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           N/A
//                         </label>
//                       </div>
//                     </div>
//                     <div className="comments-section">
//                       <textarea
//                         placeholder="Comments"
//                         value={formData.conditionalFields[fieldId]?.comments || ""}
//                         onChange={(e) => handleConditionalFieldChange(fieldId, "comments", e.target.value)}
//                         className="comments-textarea"
//                       />
//                     </div>
//                   </div>
//                 ))}
//               </div>
//             </div>
//           )}

//           {/* Image Upload Section - Fixed UI */}
//           <div className="file-upload-section">
//             <h3 className="section-title">Upload Files</h3>

//             <div
//               className="file-drop-zone"
//               onDrop={(e) => {
//                 e.preventDefault()
//                 const files = Array.from(e.dataTransfer.files)
//                 const currentImages = formData.uploadedFiles
//                 const remainingSlots = 3 - currentImages.length
//                 const filesToAdd = files.slice(0, remainingSlots)
//                 setFormData((prev) => ({
//                   ...prev,
//                   uploadedFiles: [...prev.uploadedFiles, ...filesToAdd],
//                 }))
//               }}
//               onDragOver={(e) => e.preventDefault()}
//               onDragEnter={(e) => e.preventDefault()}
//             >
//               <div className="upload-icon">
//                 <Upload size={48} />
//               </div>
//               <p className="upload-text">Drop items here</p>
//               <div className="upload-divider">or</div>
//               <label className="browse-button">
//                 <input type="file" multiple accept="image/*" onChange={handleImageUpload} style={{ display: "none" }} />
//                 Browse files
//               </label>
//             </div>

//             {formData.uploadedFiles.length > 0 && (
//               <div className="uploaded-files">
//                 <h4>Uploaded Files:</h4>
//                 <div className="file-list">
//                   {formData.uploadedFiles.map((file, index) => (
//                     <div key={index} className="file-item">
//                       <div className="file-preview">
//                         <img
//                           src={URL.createObjectURL(file) || "/placeholder.svg"}
//                           alt={`Preview ${index + 1}`}
//                           className="file-thumbnail"
//                         />
//                         <div className="file-details">
//                           <span className="file-name">{file.name}</span>
//                           <span className="file-size">{(file.size / 1024 / 1024).toFixed(2)} MB</span>
//                         </div>
//                       </div>
//                       <button type="button" onClick={() => removeImage(index)} className="remove-file-btn">
//                         <X size={16} />
//                       </button>
//                     </div>
//                   ))}
//                 </div>
//                 <div className="file-count">{formData.uploadedFiles.length} of 3 files selected</div>
//               </div>
//             )}
//           </div>

//           <button type="submit" className="submit-button">
//             Submit Form
//           </button>
//         </form>
//       </div>
//     </div>
//   )
// }



// "use client"

// import { useState, useEffect } from "react"
// import axios from "axios"
// import { X, Upload, AlertCircle } from "lucide-react"
// import "../styles/form.css"

// export default function ReviewerForm() {
//   // Helper function to get Friday of any given week using pure string manipulation
//   const getFridayOfWeek = (dateStr) => {
//     if (!dateStr) return null
//     try {
//       // Validate date format
//       const dateRegex = /^\d{4}-\d{2}-\d{2}$/
//       if (!dateRegex.test(dateStr)) {
//         console.error("❌ Invalid date format:", dateStr)
//         return null
//       }
//       // Parse date components as numbers
//       const [year, month, day] = dateStr.split("-").map(Number)
//       // Validate date components
//       if (year < 1900 || year > 2100 || month < 1 || month > 12 || day < 1 || day > 31) {
//         console.error("❌ Invalid date components:", { year, month, day })
//         return null
//       }
//       // Calculate day of week using Zeller's congruence (no Date object needed)
//       let adjustedMonth = month
//       let adjustedYear = year
//       if (month < 3) {
//         adjustedMonth += 12
//         adjustedYear -= 1
//       }
//       // Zeller's congruence formula
//       const q = day
//       const m = adjustedMonth
//       const k = adjustedYear % 100
//       const j = Math.floor(adjustedYear / 100)
//       const h = (q + Math.floor((13 * (m + 1)) / 5) + k + Math.floor(k / 4) + Math.floor(j / 4) - 2 * j) % 7
//       // Convert Zeller's result to standard day of week (0 = Saturday, 1 = Sunday, ..., 6 = Friday)
//       const dayOfWeek = (h + 5) % 7 // Convert to 0 = Monday, 1 = Tuesday, ..., 6 = Sunday
//       // Calculate days to add to get to Friday (4 = Friday in 0-based week starting Monday)
//       const daysToFriday = (4 - dayOfWeek + 7) % 7
//       // Add days to get Friday
//       const fridayDay = day + daysToFriday
//       let fridayMonth = month
//       let fridayYear = year
//       // Handle month overflow
//       const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
//       // Check for leap year
//       if (fridayYear % 4 === 0 && (fridayYear % 100 !== 0 || fridayYear % 400 === 0)) {
//         daysInMonth[1] = 29
//       }
//       if (fridayDay > daysInMonth[fridayMonth - 1]) {
//         const newDay = fridayDay - daysInMonth[fridayMonth - 1]
//         fridayMonth += 1
//         if (fridayMonth > 12) {
//           fridayMonth = 1
//           fridayYear += 1
//         }
//         return `${fridayYear}-${String(fridayMonth).padStart(2, "0")}-${String(newDay).padStart(2, "0")}`
//       }
//       return `${fridayYear}-${String(fridayMonth).padStart(2, "0")}-${String(fridayDay).padStart(2, "0")}`
//     } catch (error) {
//       console.error("❌ Error calculating Friday:", error)
//       return null
//     }
//   }

//   // Helper function to get current date values without timezone issues
//   const getCurrentDateValues = () => {
//     // Get current date in local timezone as YYYY-MM-DD string
//     const today = new Date()
//     const year = today.getFullYear()
//     const month = String(today.getMonth() + 1).padStart(2, "0")
//     const day = String(today.getDate()).padStart(2, "0")
//     const todayStr = `${year}-${month}-${day}`
//     const fridayOfWeek = getFridayOfWeek(todayStr)
//     // Get month name and year from Friday date
//     const [fridayYear, fridayMonth] = fridayOfWeek.split("-").map(Number)
//     const monthNames = [
//       "January",
//       "February",
//       "March",
//       "April",
//       "May",
//       "June",
//       "July",
//       "August",
//       "September",
//       "October",
//       "November",
//       "December",
//     ]
//     return {
//       today: todayStr,
//       fridayOfWeek,
//       month: monthNames[fridayMonth - 1],
//       year: fridayYear,
//     }
//   }

//   // Initialize with current date values
//   const initialDateValues = getCurrentDateValues()

//   const [activeWorkstream, setActiveWorkstream] = useState("01")
//   const [formData, setFormData] = useState({
//     fullName: "",
//     registrationType: "",
//     reviewStatus: "",
//     reviewReason: "",
//     reviewType: "",
//     websiteUrl: "",
//     reviewDate: initialDateValues.today,
//     reviewWeek: initialDateValues.fridayOfWeek,
//     month: initialDateValues.month,
//     year: initialDateValues.year,
//     reviewDateTraffic: "",
//     websiteOwner: "",
//     websiteType: "",
//     accessibility: "",
//     thirdPartyContent: "",
//     registrationPlatform: "",
//     conditionalFields: {},
//     uploadedFiles: [],
//     website_source_id: "",
//   })

//   // Website URL autocomplete states
//   const [suggestions, setSuggestions] = useState([])
//   const [showSuggestions, setShowSuggestions] = useState(false)
//   const [urlStatus, setUrlStatus] = useState({ isNew: false, message: "" })
//   const [isSubmitting, setIsSubmitting] = useState(false)
//   const [uploadProgress, setUploadProgress] = useState(0)

//   const workstreams = [
//     { id: "01", label: "Workstream 01", color: "#E3F2FD" },
//     { id: "02", label: "Workstream 02", color: "#F3E5F5" },
//     { id: "03", label: "Workstream 03", color: "#E8EAF6" },
//     { id: "04", label: "Workstream 04", color: "#E8F5E8" },
//     { id: "05", label: "Workstream 05", color: "#FFF3E0" },
//   ]

//   // Reset date fields to current values on component mount
//   useEffect(() => {
//     const resetToCurrentDate = () => {
//       const currentValues = getCurrentDateValues()
//       console.log("🔄 Resetting to current date values:", currentValues)
//       setFormData((prev) => ({
//         ...prev,
//         reviewDate: currentValues.today,
//         reviewWeek: currentValues.fridayOfWeek,
//         month: currentValues.month,
//         year: currentValues.year,
//       }))
//     }
//     resetToCurrentDate()
//   }, [])

//   // Website URL autocomplete functionality
//   const fetchSuggestions = async (searchTerm) => {
//     try {
//       const response = await axios.get(`http://localhost:5000/api/website-sources?search=${searchTerm}`)
//       setSuggestions(response.data)
//       setShowSuggestions(true)
//       const exactMatch = response.data.find((item) => item.website_url.toLowerCase() === searchTerm.toLowerCase())
//       if (!exactMatch && searchTerm.length > 3) {
//         setUrlStatus({
//           isNew: true,
//           message: "This URL will be added as a new entry when you submit the form.",
//         })
//       } else {
//         setUrlStatus({ isNew: false, message: "" })
//       }
//     } catch (error) {
//       console.error("Failed to fetch suggestions:", error)
//       setSuggestions([])
//     }
//   }

//   const handleWebsiteUrlChange = (e) => {
//     const value = e.target.value
//     setFormData((prev) => ({
//       ...prev,
//       websiteUrl: value,
//       website_source_id: "",
//     }))
//     if (value.length > 1) {
//       fetchSuggestions(value)
//     } else {
//       setSuggestions([])
//       setShowSuggestions(false)
//       setUrlStatus({ isNew: false, message: "" })
//     }
//   }

//   const handleSuggestionClick = (suggestion) => {
//     setFormData((prev) => ({
//       ...prev,
//       websiteUrl: suggestion.website_url,
//       website_source_id: suggestion.id,
//     }))
//     setSuggestions([])
//     setShowSuggestions(false)
//     setUrlStatus({ isNew: false, message: "" })
//   }

//   const handleInputChange = (field, value) => {
//     setFormData((prev) => ({ ...prev, [field]: value }))
//   }

//   // Handle date change with Friday calculation
//   const handleDateChange = (e) => {
//     const selected = e.target.value
//     console.log("📅 Date changed to:", selected)
//     const fridayDate = getFridayOfWeek(selected)
//     console.log("📅 Calculated Friday:", fridayDate)

//     // Get month and year from Friday date using string parsing
//     const [fridayYear, fridayMonth] = fridayDate.split("-").map(Number)
//     const monthNames = [
//       "January",
//       "February",
//       "March",
//       "April",
//       "May",
//       "June",
//       "July",
//       "August",
//       "September",
//       "October",
//       "November",
//       "December",
//     ]
//     const month = monthNames[fridayMonth - 1]
//     const year = fridayYear

//     console.log("📅 Final values:", { selected, fridayDate, month, year })

//     setFormData((prev) => ({
//       ...prev,
//       reviewDate: selected,
//       reviewWeek: fridayDate,
//       month: month,
//       year: year,
//     }))
//   }

//   // Image upload functionality with multiple selection and validation
//   const [imageError, setImageError] = useState("")

//   const handleImageUpload = (e) => {
//     const files = Array.from(e.target.files)
//     const currentImages = formData.uploadedFiles
//     const totalAfterUpload = currentImages.length + files.length

//     // Clear any previous error
//     setImageError("")

//     // Check if total images would exceed 3
//     if (totalAfterUpload > 3) {
//       const remainingSlots = 3 - currentImages.length
//       if (remainingSlots === 0) {
//         setImageError("Maximum 3 images allowed. Please remove some images first.")
//       } else {
//         setImageError(`You can only select ${remainingSlots} more image(s). Maximum 3 images allowed.`)
//       }
//       e.target.value = "" // Clear the input
//       return
//     }

//     // Validate file types
//     const validTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp"]
//     const invalidFiles = files.filter((file) => !validTypes.includes(file.type))

//     if (invalidFiles.length > 0) {
//       setImageError("Please select only image files (JPEG, PNG, GIF, WebP)")
//       e.target.value = ""
//       return
//     }

//     // Validate file sizes (max 5MB per file)
//     const maxSize = 5 * 1024 * 1024 // 5MB
//     const oversizedFiles = files.filter((file) => file.size > maxSize)

//     if (oversizedFiles.length > 0) {
//       setImageError("Each image must be smaller than 5MB")
//       e.target.value = ""
//       return
//     }

//     // All validations passed, add the files
//     setFormData((prev) => ({
//       ...prev,
//       uploadedFiles: [...prev.uploadedFiles, ...files],
//     }))

//     e.target.value = ""

//     // Show success message if multiple files were added
//     if (files.length > 1) {
//       setImageError(`✅ ${files.length} images added successfully!`)
//       setTimeout(() => setImageError(""), 3000) // Clear success message after 3 seconds
//     }
//   }

//   const removeImage = (indexToRemove) => {
//     setFormData((prev) => ({
//       ...prev,
//       uploadedFiles: prev.uploadedFiles.filter((_, index) => index !== indexToRemove),
//     }))
//     // Clear any error when removing images
//     setImageError("")
//   }

//   const handleSubmit = (e) => {
//     e.preventDefault()
//     console.log("Form submitted:", formData)
//     // Add your submission logic here
//   }

//   const getVisibleFields = () => {
//     switch (formData.thirdPartyContent) {
//       case "yes":
//         return Array.from({ length: 19 }, (_, i) => `A${i + 1}`)
//       case "no":
//         return Array.from({ length: 7 }, (_, i) => `A${i + 2}`) // A2-A8
//       case "na":
//         return ["A1"]
//       default:
//         return []
//     }
//   }

//   const handleConditionalFieldChange = (fieldId, type, value) => {
//     setFormData((prev) => ({
//       ...prev,
//       conditionalFields: {
//         ...prev.conditionalFields,
//         [fieldId]: {
//           ...prev.conditionalFields[fieldId],
//           [type]: value,
//         },
//       },
//     }))
//   }

//   const visibleFields = getVisibleFields()

//   return (
//     <div className="form-container">
//       {/* Workstream Tabs */}
    

//       {/* Main Form */}
//       <div className="form-content">
//         <h2 className="form-title">Reviewer Information</h2>

//         <form onSubmit={handleSubmit} className="reviewer-form">
//           {/* First Row */}
//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="fullName">Reviewed By</label>
//               <input
//                 type="text"
//                 id="fullName"
//                 placeholder="Full Name"
//                 value={formData.fullName}
//                 onChange={(e) => handleInputChange("fullName", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="registrationType">Registration Type</label>
//               <select
//                 id="registrationType"
//                 value={formData.registrationType}
//                 onChange={(e) => handleInputChange("registrationType", e.target.value)}
//               >
//                 <option value="">Select an option</option>
//                 <option value="old-registration">Old Registration</option>
//                 <option value="new-registration">New Registration</option>
//               </select>
//             </div>
//           </div>

//           {/* Review Status Row */}
//           <div className="review-status-row">
//             <div className="form-group">
//               <label>Review Status</label>
//               <div className="radio-group">
//                 <label className="radio-option">
//                   <input
//                     type="radio"
//                     name="reviewStatus"
//                     value="completed"
//                     checked={formData.reviewStatus === "completed"}
//                     onChange={(e) => handleInputChange("reviewStatus", e.target.value)}
//                   />
//                   <span className="radio-custom"></span>
//                   Completed
//                 </label>
//                 <label className="radio-option">
//                   <input
//                     type="radio"
//                     name="reviewStatus"
//                     value="not-completed"
//                     checked={formData.reviewStatus === "not-completed"}
//                     onChange={(e) => handleInputChange("reviewStatus", e.target.value)}
//                   />
//                   <span className="radio-custom"></span>
//                   Not Completed
//                 </label>
//               </div>
//             </div>

//             {/* Conditional reason field in same row */}
//             {formData.reviewStatus === "not-completed" && (
//               <div className="form-group reason-field">
//                 <label htmlFor="reviewReason">If chosen not, please provide a reason:</label>
//                 <select
//                   id="reviewReason"
//                   value={formData.reviewReason}
//                   onChange={(e) => handleInputChange("reviewReason", e.target.value)}
//                 >
//                   <option value="">Select a reason</option>
//                   <option value="site-offline">Site offline</option>
//                   <option value="inactive">Inactive</option>
//                   <option value="does-not-exist">Does Not Exist</option>
//                   <option value="unable-to-open-site">Unable to open Site</option>
//                 </select>
//               </div>
//             )}
//           </div>

//           {/* Review Type and Website URL Row */}
//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewType">Review Type</label>
//               <select
//                 id="reviewType"
//                 value={formData.reviewType}
//                 onChange={(e) => handleInputChange("reviewType", e.target.value)}
//               >
//                 <option value="">Select an option</option>
//                 <option value="new-review">New Review</option>
//                 <option value="re-review">Re-Review</option>
//               </select>
//             </div>
//             <div className="form-group" style={{ position: "relative" }}>
//               <label htmlFor="websiteUrl">Website URL</label>
//               <input
//                 type="text"
//                 id="websiteUrl"
//                 placeholder="Start typing a website URL..."
//                 value={formData.websiteUrl}
//                 onChange={handleWebsiteUrlChange}
//                 onBlur={() => setTimeout(() => setShowSuggestions(false), 200)} // Increased timeout
//                 onFocus={() => {
//                   if (formData.websiteUrl.length > 1 && suggestions.length > 0) setShowSuggestions(true)
//                 }}
//                 required
//               />

//               {/* New URL Status Indicator */}
//               {urlStatus.isNew && (
//                 <div className="new-url-indicator">
//                   <AlertCircle size={16} style={{ marginRight: "8px" }} />
//                   {urlStatus.message}
//                 </div>
//               )}

//               {/* Suggestions Dropdown */}
//               {showSuggestions && (
//                 <ul className="suggestions-dropdown">
//                   {suggestions.length > 0 ? (
//                     suggestions.map((item) => (
//                       <li
//                         key={item.id}
//                         onMouseDown={() => handleSuggestionClick(item)} // Changed from onClick to onMouseDown
//                         className="suggestion-item"
//                       >
//                         {item.website_url}
//                       </li>
//                     ))
//                   ) : (
//                     <li className="suggestion-item no-hover">No existing URLs found</li>
//                   )}
//                 </ul>
//               )}
//             </div>
//           </div>

//           {/* URL Information Section */}
//           <h3 className="section-title">URL Information</h3>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewDate">Review Date</label>
//               <input type="date" id="reviewDate" value={formData.reviewDate} onChange={handleDateChange} />
//             </div>
//             <div className="form-group">
//               <label htmlFor="reviewWeek">Review Week (Friday)</label>
//               <input
//                 type="date"
//                 id="reviewWeek"
//                 value={formData.reviewWeek}
//                 readOnly
//                 style={{ backgroundColor: "#f0f0f0", cursor: "not-allowed" }}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="month">Month</label>
//               <input
//                 type="text"
//                 id="month"
//                 value={formData.month}
//                 readOnly
//                 style={{ backgroundColor: "#f0f0f0", cursor: "not-allowed" }}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="year">Year</label>
//               <input
//                 type="text"
//                 id="year"
//                 value={formData.year}
//                 readOnly
//                 style={{ backgroundColor: "#f0f0f0", cursor: "not-allowed" }}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="reviewDateTraffic">Review Date Traffic</label>
//               <input
//                 type="text"
//                 id="reviewDateTraffic"
//                 placeholder="Mention Number"
//                 value={formData.reviewDateTraffic}
//                 onChange={(e) => handleInputChange("reviewDateTraffic", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="websiteOwner">Website Owner</label>
//               <input
//                 type="text"
//                 id="websiteOwner"
//                 placeholder="Company Name"
//                 value={formData.websiteOwner}
//                 onChange={(e) => handleInputChange("websiteOwner", e.target.value)}
//               />
//             </div>
//           </div>

//           <div className="form-row">
//             <div className="form-group">
//               <label htmlFor="websiteType">Website Type</label>
//               <input
//                 type="text"
//                 id="websiteType"
//                 placeholder="Account"
//                 value={formData.websiteType}
//                 onChange={(e) => handleInputChange("websiteType", e.target.value)}
//               />
//             </div>
//             <div className="form-group">
//               <label htmlFor="accessibility">Accessibility</label>
//               <input
//                 type="text"
//                 id="accessibility"
//                 placeholder="Website Address"
//                 value={formData.accessibility}
//                 onChange={(e) => handleInputChange("accessibility", e.target.value)}
//               />
//             </div>
//           </div>

//           {/* Third-Party Content */}
//           <div className="form-group full-width">
//             <label>Third-Party Content</label>
//             <div className="radio-group horizontal">
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="yes"
//                   checked={formData.thirdPartyContent === "yes"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 Yes
//               </label>
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="no"
//                   checked={formData.thirdPartyContent === "no"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 No
//               </label>
//               <label className="radio-option">
//                 <input
//                   type="radio"
//                   name="thirdPartyContent"
//                   value="na"
//                   checked={formData.thirdPartyContent === "na"}
//                   onChange={(e) => handleInputChange("thirdPartyContent", e.target.value)}
//                 />
//                 <span className="radio-custom"></span>
//                 N/A
//               </label>
//             </div>
//           </div>

//           {/* Registration Platform */}
//           <div className="form-group full-width">
//             <label htmlFor="registrationPlatform">Registration platform (if third-party)</label>
//             <input
//               type="text"
//               id="registrationPlatform"
//               placeholder="Mention website URL"
//               value={formData.registrationPlatform}
//               onChange={(e) => handleInputChange("registrationPlatform", e.target.value)}
//             />
//           </div>

//           {/* Conditional Fields */}
//           {formData.thirdPartyContent && formData.thirdPartyContent !== "" && (
//             <div className="conditional-fields-section">
//               <h3 className="section-title">
//                 Assessment Fields
//                 <span style={{ fontSize: "14px", fontWeight: "normal", color: "#666" }}>
//                   ({visibleFields.length} fields visible)
//                 </span>
//               </h3>
//               <div className="conditional-fields-grid">
//                 {visibleFields.map((fieldId) => (
//                   <div key={fieldId} className="conditional-field">
//                     <div className="field-header">
//                       <h4 className="field-label">{fieldId}</h4>
//                       <div className="radio-group horizontal">
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="yes"
//                             checked={formData.conditionalFields[fieldId]?.answer === "yes"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           Yes
//                         </label>
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="no"
//                             checked={formData.conditionalFields[fieldId]?.answer === "no"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           No
//                         </label>
//                         <label className="radio-option">
//                           <input
//                             type="radio"
//                             name={`${fieldId}-answer`}
//                             value="na"
//                             checked={formData.conditionalFields[fieldId]?.answer === "na"}
//                             onChange={(e) => handleConditionalFieldChange(fieldId, "answer", e.target.value)}
//                           />
//                           <span className="radio-custom"></span>
//                           N/A
//                         </label>
//                       </div>
//                     </div>
//                     <div className="comments-section">
//                       <textarea
//                         placeholder="Comments"
//                         value={formData.conditionalFields[fieldId]?.comments || ""}
//                         onChange={(e) => handleConditionalFieldChange(fieldId, "comments", e.target.value)}
//                         className="comments-textarea"
//                       />
//                     </div>
//                   </div>
//                 ))}
//               </div>
//             </div>
//           )}

//           {/* Image Upload Section - Grid Layout */}
//           <div className="file-upload-section">
//             <h3 className="section-title">Upload Images (Max 3):</h3>

//             {/* Error/Success Message */}
//             {imageError && (
//               <div className={`image-error-message ${imageError.includes("✅") ? "success" : "error"}`}>
//                 {imageError}
//               </div>
//             )}

//             <div className="image-upload-grid">
//               {/* Display uploaded images as preview cards */}
//               {formData.uploadedFiles.map((file, index) => (
//                 <div key={index} className="image-preview-card">
//                   <img
//                     src={URL.createObjectURL(file) || "/placeholder.svg"}
//                     alt={`Preview ${index + 1}`}
//                     className="preview-image"
//                   />
//                   <button
//                     type="button"
//                     onClick={() => removeImage(index)}
//                     className="delete-image-btn"
//                     disabled={isSubmitting}
//                   >
//                     <X size={16} />
//                   </button>
//                   <div className="image-card-info">
//                     <div className="image-card-name">
//                       {file.name.length > 20 ? file.name.substring(0, 20) + "..." : file.name}
//                     </div>
//                     <div className="image-card-size">{(file.size / 1024 / 1024).toFixed(2)} MB</div>
//                   </div>
//                 </div>
//               ))}

//               {/* Add Image Card - Show only if less than 3 images */}
//               {formData.uploadedFiles.length < 3 && (
//                 <div className="add-image-card">
//                   <input
//                     type="file"
//                     accept="image/*"
//                     onChange={handleImageUpload}
//                     style={{ display: "none" }}
//                     id="image-upload-input"
//                     disabled={isSubmitting}
//                     multiple // Enable multiple selection
//                   />
//                   <label htmlFor="image-upload-input" className="add-image-label">
//                     <div className="add-image-icon">+</div>
//                     <div className="upload-icon-small">
//                       <Upload size={20} />
//                     </div>
//                     <span className="add-image-label-text">
//                       {formData.uploadedFiles.length === 0 ? "Add Images" : "Add More"}
//                     </span>
//                     <span className="add-image-hint">(Select multiple images)</span>
//                   </label>
//                 </div>
//               )}
//             </div>

//             {/* Image counter */}
//             {formData.uploadedFiles.length > 0 && (
//               <div className="image-counter">{formData.uploadedFiles.length} of 3 images selected</div>
//             )}
//           </div>

//           <button type="submit" className="submit-button">
//             Submit Form
//           </button>
//         </form>
//       </div>
//     </div>
//   )
// }